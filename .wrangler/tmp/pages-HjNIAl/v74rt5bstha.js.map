{
  "version": 3,
  "sources": ["<define:__ROUTES__>", "../../../node_modules/wrangler/templates/pages-dev-pipeline.ts"],
  "sourcesContent": ["{\n  \"version\": 1,\n  \"include\": [\n    \"/*\"\n  ],\n  \"exclude\": [\n    \"/\",\n    \"/_astro/*\",\n    \"/DrukWide-Heavy.woff\",\n    \"/DrukWide-Heavy.woff2\",\n    \"/DrukWide-HeavyItalic.woff\",\n    \"/DrukWide-HeavyItalic.woff2\",\n    \"/DrukWide-Medium.woff\",\n    \"/DrukWide-Medium.woff2\",\n    \"/PPSupplySans-Regular.woff\",\n    \"/PPSupplySans-Regular.woff2\",\n    \"/PPSupplySans-Ultralight.woff\",\n    \"/PPSupplySans-Ultralight.woff2\",\n    \"/favicon.svg\",\n    \"/og_image.png\",\n    \"/search-data.json\",\n    \"/api/*\",\n    \"/shapes/*\",\n    \"/united-states/*\",\n    \"/australia/*\",\n    \"/united-kingdom/*\",\n    \"/atlantic-ocean/*\",\n    \"/india/*\",\n    \"/mexico/*\",\n    \"/argentina/*\",\n    \"/bahamas/*\",\n    \"/caribbean-sea/*\",\n    \"/albania/*\",\n    \"/thailand/*\",\n    \"/afghanistan/*\",\n    \"/pacific-ocean/*\",\n    \"/aruba/*\",\n    \"/armenia/*\",\n    \"/algeria/*\",\n    \"/hungary/*\",\n    \"/south-africa/*\",\n    \"/antigua-and-barbuda/*\",\n    \"/antarctica/*\",\n    \"/international-waters/*\",\n    \"/iraq/*\",\n    \"/norway/*\",\n    \"/unknown/*\",\n    \"/zimbabwe/*\",\n    \"/vietnam/*\",\n    \"/canada/*\",\n    \"/brazil/*\",\n    \"/ireland/*\",\n    \"/germany/*\",\n    \"/turkiye/*\",\n    \"/spain/*\",\n    \"/belgium/*\",\n    \"/netherlands/*\",\n    \"/italy/*\",\n    \"/united-arab-emirates/*\",\n    \"/iceland/*\",\n    \"/iran/*\",\n    \"/new-zealand/*\",\n    \"/sweden/*\",\n    \"/france/*\",\n    \"/dominican-republic/*\",\n    \"/bosnia-and-herzegovina/*\",\n    \"/portugal/*\",\n    \"/indonesia/*\",\n    \"/czech-republic/*\",\n    \"/peru/*\",\n    \"/poland/*\",\n    \"/ukraine/*\",\n    \"/philippines/*\",\n    \"/croatia/*\",\n    \"/nepal/*\",\n    \"/austria/*\",\n    \"/israel/*\",\n    \"/chile/*\",\n    \"/japan/*\",\n    \"/oman/*\",\n    \"/venezuela/*\",\n    \"/colombia/*\",\n    \"/paraguay/*\",\n    \"/russia/*\",\n    \"/cyprus/*\",\n    \"/egypt/*\",\n    \"/honduras/*\",\n    \"/bangladesh/*\",\n    \"/guatemala/*\",\n    \"/estonia/*\",\n    \"/switzerland/*\",\n    \"/lithuania/*\",\n    \"/kazakhstan/*\",\n    \"/morocco/*\",\n    \"/china/*\",\n    \"/mauritius/*\",\n    \"/pakistan/*\",\n    \"/saudi-arabia/*\",\n    \"/northern-mariana-islands/*\",\n    \"/south-korea/*\",\n    \"/jamaica/*\",\n    \"/us-virgin-islands/*\",\n    \"/slovenia/*\",\n    \"/ecuador/*\",\n    \"/finland/*\"\n  ]\n}", "// @ts-ignore entry point will get replaced\nimport worker from \"__ENTRY_POINT__\";\nimport { isRoutingRuleMatch } from \"./pages-dev-util\";\n\n// @ts-ignore entry point will get replaced\nexport * from \"__ENTRY_POINT__\";\n\n// @ts-ignore routes are injected\nconst routes = __ROUTES__;\n\nexport default <ExportedHandler<{ ASSETS: Fetcher }>>{\n\tfetch(request, env, context) {\n\t\tconst { pathname } = new URL(request.url);\n\n\t\tfor (const exclude of routes.exclude) {\n\t\t\tif (isRoutingRuleMatch(pathname, exclude)) {\n\t\t\t\treturn env.ASSETS.fetch(request);\n\t\t\t}\n\t\t}\n\n\t\tfor (const include of routes.include) {\n\t\t\tif (isRoutingRuleMatch(pathname, include)) {\n\t\t\t\tconst workerAsHandler = worker as ExportedHandler;\n\t\t\t\tif (workerAsHandler.fetch === undefined) {\n\t\t\t\t\tthrow new TypeError(\"Entry point missing `fetch` handler\");\n\t\t\t\t}\n\t\t\t\treturn workerAsHandler.fetch(request, env, context);\n\t\t\t}\n\t\t}\n\n\t\treturn env.ASSETS.fetch(request);\n\t},\n};\n"],
  "mappings": ";AAAA;AAAA,EACE,SAAW;AAAA,EACX,SAAW;AAAA,IACT;AAAA,EACF;AAAA,EACA,SAAW;AAAA,IACT;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;;;ACzGA,OAAO,YAAY;AACnB,SAAS,0BAA0B;AAGnC,cAAc;AAGd,IAAM,SAAS;AAEf,IAAO,6BAA8C;AAAA,EACpD,MAAM,SAAS,KAAK,SAAS;AAC5B,UAAM,EAAE,SAAS,IAAI,IAAI,IAAI,QAAQ,GAAG;AAExC,eAAW,WAAW,OAAO,SAAS;AACrC,UAAI,mBAAmB,UAAU,OAAO,GAAG;AAC1C,eAAO,IAAI,OAAO,MAAM,OAAO;AAAA,MAChC;AAAA,IACD;AAEA,eAAW,WAAW,OAAO,SAAS;AACrC,UAAI,mBAAmB,UAAU,OAAO,GAAG;AAC1C,cAAM,kBAAkB;AACxB,YAAI,gBAAgB,UAAU,QAAW;AACxC,gBAAM,IAAI,UAAU,qCAAqC;AAAA,QAC1D;AACA,eAAO,gBAAgB,MAAM,SAAS,KAAK,OAAO;AAAA,MACnD;AAAA,IACD;AAEA,WAAO,IAAI,OAAO,MAAM,OAAO;AAAA,EAChC;AACD;",
  "names": []
}
