---
import { getEntry } from 'astro:content';
import { getCollection } from 'astro:content';
import LayoutApp from '../../../layouts/layoutApp.astro';
import LocationList from '../../../components/LocationList.astro';
import { supabase } from '../../../lib/supabase';

export async function getStaticPaths() {
  const states = await getCollection('states')
  const paths = await Promise.all(
    states.map(async (state) => {
      let { data: cities, error } = await supabase
        .from('Lookup City')
        .select('*')
        .eq('state', state.id)
        .order('record_count', { ascending: false })
      // console.log(state)
      return {
        params: {
          country: state.data.country,
          state: state.id
        },
        props: {
          stateName: state.data.canonical_name,
          recordCount: state.data.record_count,
          cities: cities
        }
      }
    })
  )
  return paths.filter(Boolean) // Remove any null entries
}

const { stateName, recordCount, cities } = Astro.props
const { country, state } = Astro.params
// console.log(cities)
const countryData = await getEntry('countries', country)
// const citiesByState = await getEntry('citiesByState', state)

const cityLinks = cities?.map((city) => ({
	title: city.canonical_name,
	url: `/${countryData?.data.id}/${state}/${city.id}`,
	count: city.record_count
}))

// let { data: reports, error } = await supabase
//   .from('records_by_state')
//   .select('records')
//   .eq('canonical_state', state)
//   .limit(1)
//   .single()

let { data: reports, error } = await supabase
  .from('Clean Data')
  .select('*')
  .eq('canonical_state', state)
  .limit(100)

// console.log(reports)
---
<LayoutApp
  title={`${stateName}, ${countryData?.data.canonical_name}`}
  reports={reports}
>
  <LocationList
    breadcrumbs={[
      {
        label: countryData?.data.canonical_name,
        url: `/${country}`
      }
    ]}
    categoryTitle={stateName}
    categoryCount={recordCount}
    locations={cityLinks}
  />
</LayoutApp>