---
import LocationChip from "./LocationChip.astro"

interface Breadcrumb {
  label: string;
  url: string;
}

interface Props {
  locations?: any;
  categoryTitle?: string;
  categoryCount?: string;
  breadcrumbs?: Breadcrumb[];
}

const { locations, categoryTitle, categoryCount, breadcrumbs } = Astro.props
---
<div class="location-list">
  { breadcrumbs &&
    <div class="breadcrumbs">
      { breadcrumbs?.map((breadcrumb, i) => (
        <a class="utility-small" href={breadcrumb.url}>{(i != 0) && <span>&#8725;&nbsp;</span> }{breadcrumb.label}&nbsp;</a>
      ))}
    </div>
  }
  {categoryTitle && 
    <div class="category-title">
      <h1 class="title utility">{categoryTitle}</h1>
      {categoryCount && <span class="category-count utility-small">{categoryCount.toLocaleString()}</span>}
    </div>
  }
  <div class="locations">
    {locations?.map((chip) => (
      <LocationChip 
        title={chip.title}
        url={chip.url}
        count={chip.count}
      />
    ))}
  </div>
</div>

<style>

  .location-list {
    display: flex;
    flex-direction: column;
    align-items: stretch;
    gap: var(--space-3xs);
    position: relative;

    .breadcrumbs {
      display: flex;
      flex-direction: row;
    }

    .category-title {
      display: flex;
      flex-direction: row;
      align-items: flex-start;
      gap: var(--space-3xs);
      
      .title {
        margin-block: 0.4em 0;
      }

      .category-count {
        background-color: var(--color-background-secondary);
        border-radius: var(--radius-rounded);
        padding: 0.2em 0.9em;
      }
    }

    .locations {
      display: flex;
      flex-direction: column;
      gap: var(--space-3xs);
    }
  }


</style>