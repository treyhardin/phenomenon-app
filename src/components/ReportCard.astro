---
import { formatDate } from "../lib/utils"
import Chevron from "../icons/shape_chevron.svg"
import Disk from "../icons/shape_disk.svg"
import Cigar from "../icons/shape_cigar.svg"
import Circle from "../icons/shape_circle.svg"
import Cone from "../icons/shape_cone.svg"
import Cross from "../icons/shape_cross.svg"
import Cube from "../icons/shape_cube.svg"
import Cylinder from "../icons/shape_cylinder.svg"
import Diamond from "../icons/shape_diamond.svg"
import Egg from "../icons/shape_egg.svg"
import Fireball from "../icons/shape_fireball.svg"
import Flash from "../icons/shape_flash.svg"
import Formation from "../icons/shape_formation.svg"
import Light from "../icons/shape_light.svg"
import Orb from "../icons/shape_orb.svg"
import Oval from "../icons/shape_oval.svg"
import Rectangle from "../icons/shape_rectangle.svg"
import Sphere from "../icons/shape_sphere.svg"
import Star from "../icons/shape_star.svg"
import Teardrop from "../icons/shape_teardrop.svg"
import Triangle from "../icons/shape_triangle.svg"
import Unknown from "../icons/shape_unknown.svg"
import { checkIsImage, checkIsVideo } from "../lib/utils"
import { Image } from "astro:assets"
// interface Props extends ReportCard;

const { id, dateOccurred, city, canonical_city, canonical_state, canonical_country, state, country, summary, shape, content, media } = Astro.props
const formattedDate = formatDate(dateOccurred)
---
<div class="report-card">
  <div class="info">
    { dateOccurred && formattedDate && <p>{formattedDate}</p>}
    { id && <span>{id}</span>}
  </div>


  <div class="summary">
    { media?.length > 0 && 
      <div class="media">
        { checkIsImage(media[0]) &&
          <Image 
            src={media[0]}
            alt={`Image from report ${id}`}
            width="100"
            height="100"
          />
        }
        {checkIsVideo(media[0]) &&
          <video src={media[0]} autoplay loop muted />
        }
      </div>
    }
    { summary && <p class="h6">{summary}</p>}
  </div>

  <!-- {dateOccurred} -->
  <div class="details">

    <div class="location">
      { (canonical_city || city) &&  <span>{canonical_city ? canonical_city : city}</span>}
      { (canonical_state || state) && <span>, {canonical_state ? canonical_state : state}</span>}
      { (canonical_country || country) && <span>, {canonical_country ? canonical_country : country}</span>}
    </div>
    {shape &&
      <div class="shape-info">
        <span class="shape-icon">
          {shape === "Disk" && <Disk />}
          {shape === "Chevron" && <Chevron />}
          {shape === "Cigar" && <Cigar />}
          {shape === "Circle" && <Circle />}
          {shape === "Cone" && <Cone />}
          {shape === "Cross" && <Cross />}
          {shape === "Cube" && <Cube />}
          {shape === "Cylinder" && <Cylinder />}
          {shape === "Diamond" && <Diamond />}
          {shape === "Egg" && <Egg />}
          {shape === "Fireball" && <Fireball />}
          {shape === "Flash" && <Flash />}
          {shape === "Formation" && <Formation />}
          {shape === "Light" && <Light />}
          {shape === "Orb" && <Orb />}
          {shape === "Oval" && <Oval />}
          {shape === "Rectangle" && <Rectangle />}
          {shape === "Sphere" && <Sphere />}
          {shape === "Star" && <Star />}
          {shape === "Teardrop" && <Teardrop />}
          {shape === "Triangle" && <Triangle />}
          {(shape === "Unknown" || shape === "Other" || shape === "Changing") && <Unknown />}
        </span>
        { shape && <span>{shape}</span>}
      </div>
    }
  </div>
  { (content || media?.length > 0) && <button data-style="secondary" popovertarget={`details_${id}`}>View Details</button>}
</div>

{ (content || media?.length > 0) &&
  <dialog popover id={`details_${id}`} class="detail-modal" data-color-scheme="inverse">
    { id && <span class="utility">{id}</span>}
    {/* <Fragment set:html={content} /> */}
    <div class="inner-content">
      { media?.length > 0 && 
        <div class="media">
          { media.map((asset) => {
            if (checkIsImage(asset)) return (
              <Image 
                src={media[0]}
                alt={`Image from report ${id}`}
                width="100"
                height="100"
              />
            )
            else if (checkIsVideo(asset)) return (
              <video src={asset} controls />
            )
          })}
        </div>
      }
      { content && <pre><Fragment set:text={content} /></pre> }
    </div>
    <button popovertarget={`details_${id}`}>Close</button>
    {/* </form> */}
  </dialog>
}




<style>
  .report-card {
    border-bottom: 1px solid var(--color-neutral);
    padding-block: var(--space-xs);
    display: flex;
    flex-direction: column;
    align-items: stretch;
    gap: var(--space-2xs);

    & p {
      margin: 0;
    }

    .info {
      display: flex;
      flex-direction: row;
      /* align-items: flex-start; */
      justify-content: space-between;
      align-self: stretch;
      color: var(--color-foreground-secondary);
    }

    .summary {
      display: flex;
      flex-direction: row;
      justify-content: stretch;
      align-items: center;
      gap: var(--space-2xs);

      .media {
        flex: 0 0 4rem;
        min-width: 0;

        img,
        video {
          width: 100%;
          min-width: 0;
          aspect-ratio: 1 / 1;
          height: auto;
          object-fit: cover;
        }
      }
    }

    .details {
      display: flex;
      flex-direction: column;
      /* justify-content: space-between; */
      align-items: flex-start;
      gap: var(--space-2xs);
    }

    .location {
      display: flex;
      flex-direction: row;
    }

    .shape-info {
      display: flex;
      flex-direction: row;
      align-items: center;
      gap: var(--space-3xs);

      .shape-icon {
        width: var(--icon-sm);
        height: var(--icon-sm);
        display: flex;
        place-items: center;
      }
    }
  }

  .detail-modal {
    width: calc(100% - var(--page-margin) * 2);
    max-width: 30rem;
    border-radius: var(--radius-sm);
    padding-inline: var(--space-sm);
    padding-block: var(--space-sm);
    /* flex-direction: column; */
    gap: var(--space-sm);
    border: none;
    /* justify-content: center; */
    margin: 0 auto;
    align-self: center;/* optional: breaks long words */
    max-height: calc(100dvh - var(--page-margin) * 2);
    /* display: flex; */
    flex-direction: column;
    align-items: stretch;
    /* background-color: var(--background-blur-color); */

    .media {
      display: flex;
      flex-direction: column;
      gap: var(--space-3xs);
      align-items: stretch;
      /* justify-content: stretch; */

      img,
      video {
        /* flex: 0 1 100%; */
        width: auto;
        height: auto;
        max-width: 100%;
        /* align-self: stretch; */
      }
    }

    .inner-content {
      overflow-y: auto;
      display: flex;
      flex-direction: column;
      align-items: stretch;
      gap: var(--space-xs);
    }

    pre {
      white-space: pre-wrap;
      word-break: break-word;
      flex: 0 1 auto;
    }

    &:popover-open {
      display: flex;
    }
    /* display: flex;
    flex-direction: column;
    align-items: stretch; */

    button {
      display: block;
      width: 100%;
    }
  }
</style>