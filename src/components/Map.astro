---
import { getCollection } from "astro:content"
import 'mapbox-gl/dist/mapbox-gl.css';

const { longitude, latitude, zoom } = Astro.props

const cities = await getCollection('cities')

const cityPins = {
  type: 'FeatureCollection',
  features: cities.filter((city) => city.data.latitude && city.data.longitude).map((city) => ({
    type: 'Feature',
    geometry: {
      type: 'Point',
      coordinates: [city.data.longitude, city.data.latitude]
    },
    properties: {
      title: 'Mapbox',
      description: city.data.canonical_name
    }
  }))
}
---
<main 
  class="map" 
  id="map"
  data-longitude={longitude ? longitude : null}
  data-latitude={latitude ? latitude : null}
  data-zoom={zoom ? zoom : null}
  data-pins={JSON.stringify(cityPins)}
>
</main>

<script>
  import mapboxgl, { LngLat } from 'mapbox-gl'; // or "const mapboxgl = require('mapbox-gl');"

  const DEFAULT_COORDS = new LngLat(-95.712891, 37.090240)
  const DEFAULT_ZOOM = 2.5

  mapboxgl.accessToken = import.meta.env.PUBLIC_MAPBOX_TOKEN;

  const loadMap = () => {

    const mapElement = document.getElementById("map")
    const longitude = mapElement?.dataset.longitude
    const latitude = mapElement?.dataset.latitude
    const zoom = mapElement?.dataset.zoom
    const pins = mapElement?.dataset.pins
    const geojson = pins ? JSON.parse(mapElement?.dataset.pins) : null

    // console.log(pins)
    console.log(geojson)

    const map = new mapboxgl.Map({
      container: 'map', // container ID
      style: 'mapbox://styles/trumancreative/cm6ihkvlu006h01rychf1hm9g', // style URL
      center: longitude && latitude ? new LngLat(parseFloat(longitude), parseFloat(latitude)) : DEFAULT_COORDS, // starting position [lng, lat]
      zoom: zoom ? parseFloat(zoom) : DEFAULT_ZOOM, // starting zoom
    });

    for (const feature of geojson.features) {

      const el = document.createElement('div');
      el.className = 'marker';

      new mapboxgl.Marker(el).setLngLat(feature.geometry.coordinates).addTo(map);
      // new mapboxgl.Marker().setLngLat(feature.geometry.coordinates).addTo(map);  // Replace this line with code from step 7-2
    }
  }

  document.addEventListener("astro:page-load", (event) => {
    loadMap()
  });

</script>

<style>
  .map {
    position: absolute;
    inset: 0;
    z-index: 0;

    .marker {
      /* background-image: url('https://docs.mapbox.com/help/demos/custom-markers-gl-js/mapbox-icon.png'); */
      background-color: var(--white);
      background-size: cover;
      width: 5px;
      height: 5px;
      border-radius: 50%;
      cursor: pointer;
    }
  }
</style>