---
import { getCollection } from "astro:content"
import 'mapbox-gl/dist/mapbox-gl.css';

// fs.writeFile('/test.txt', content, err => {
//   if (err) {
//     console.error(err);
//   } else {
//     // file written successfully
//   }
// });


const { longitude, latitude, zoom, zoomLevel } = Astro.props


// const countries = await getCollection('countries')
// const states = await getCollection('states')
// const cities = await getCollection('cities')

// console.log(cities)

// const countryPins = {
//   type: 'FeatureCollection',
//   features: countries.filter((country) => country.data.latitude && country.data.longitude).map((country) => ({
//     type: 'Feature',
//     geometry: {
//       type: 'Point',
//       coordinates: [country.data.longitude, country.data.latitude]
//     },
//     properties: {
//       title: country.data.canonical_name,
//       recordCount: country.data.record_count,
//       url: `/${country.data.country}`
//     }
//   }))
// }

// const statePins = {
//   type: 'FeatureCollection',
//   features: states.filter((states) => states.data.latitude && states.data.longitude).map((states) => ({
//     type: 'Feature',
//     geometry: {
//       type: 'Point',
//       coordinates: [states.data.longitude, states.data.latitude]
//     },
//     properties: {
//       title: states.data.canonical_name,
//       recordCount: states.data.record_count,
//       url: `/${states.data.country}/${states.data.state}`
//     }
//   }))
// }

// const cityPins = {
//   type: 'FeatureCollection',
//   features: cities.filter((city) => city.data.latitude && city.data.longitude).map((city) => ({
//     type: 'Feature',
//     geometry: {
//       type: 'Point',
//       coordinates: [city.data.longitude, city.data.latitude]
//     },
//     properties: {
//       title: city.data.canonical_name,
//       recordCount: city.data.record_count,
//       url: `/${city.data.country}/${city.data.state}/${city.id}`
//     }
//   }))
// }
---
<main 
  class="map" 
  id="map"
  data-color-scheme="inverse"
  transition:persist
>
</main>
<div 
  id="map-data"
  data-longitude={longitude ? longitude : null}
  data-latitude={latitude ? latitude : null}
  data-zoom-level={zoomLevel}
></div>

<script>
  import type { Feature, FeatureCollection, GeoJsonObject } from 'geojson';
  import mapboxgl, { LngLat, Map, Marker } from 'mapbox-gl'; // or "const mapboxgl = require('mapbox-gl');"

  async function getData() {
    const url = "/api/getLocations";
    try {
      const response = await fetch(url);
      if (!response.ok) {
        throw new Error(`Response status: ${response.status}`);
      }

      const json = await response.json();

      const countryData: FeatureCollection = {
        type: 'FeatureCollection',
        features: json.countries.filter((country) => country.data.latitude && country.data.longitude).map((country) => ({
          type: 'Feature',
          geometry: {
            type: 'Point',
            coordinates: [country.data.longitude, country.data.latitude]
          },
          properties: {
            title: country.data.canonical_name,
            recordCount: country.data.record_count,
            url: `/${country.id}`
          }
        }))
      }

      const stateData: FeatureCollection = {
        type: 'FeatureCollection',
        features: json.states.filter((state) => state.data.latitude && state.data.longitude).map((state) => ({
          type: 'Feature',
          geometry: {
            type: 'Point',
            coordinates: [state.data.longitude, state.data.latitude]
          },
          properties: {
            title: state.data.canonical_name,
            recordCount: state.data.record_count,
            url: `/${state.data.country}/${state.id}`
          }
        }))
      }

      const cityData: FeatureCollection = {
        type: 'FeatureCollection',
        features: json.cities.filter((city) => city.data.latitude && city.data.longitude).map((city) => ({
          type: 'Feature',
          geometry: {
            type: 'Point',
            coordinates: [city.data.longitude, city.data.latitude]
          },
          properties: {
            title: city.data.canonical_name,
            recordCount: city.data.record_count,
            url: `/${city.data.country}/${city.data.state}/${city.id}`
          }
        }))
      }
      return loadMap(countryData, stateData, cityData)
    } catch (error) {
      console.error(error.message);
    }
  }


  const DEFAULT_COORDS = new LngLat(-95.712891, 37.090240)
  const DEFAULT_ZOOM = 2.5
  const ZOOM_LEVELS = [1, 2.5,5,8]

  let map: Map
  let longitude: string | undefined
  let latitude: string | undefined
  let zoomLevel: number | undefined

  mapboxgl.accessToken = import.meta.env.PUBLIC_MAPBOX_TOKEN;

  const updateMapData = () => {
    const mapData = document.getElementById("map-data")
    longitude = mapData?.dataset.longitude
    latitude = mapData?.dataset.latitude
    zoomLevel = mapData?.dataset.zoomLevel ? parseFloat(mapData.dataset.zoomLevel) : DEFAULT_ZOOM

    console.log(zoomLevel)
  }

  const loadMap = (countryData: FeatureCollection, stateData: FeatureCollection, cityData: FeatureCollection) => {


    map = new mapboxgl.Map({
      container: 'map', // container ID
      style: 'mapbox://styles/trumancreative/cm6ihkvlu006h01rychf1hm9g?optimize=true', // style URL
      center: longitude && latitude ? new LngLat(parseFloat(longitude), parseFloat(latitude)) : DEFAULT_COORDS, // starting position [lng, lat]
      zoom: ZOOM_LEVELS[zoomLevel] // starting zoom
    });

    // console.log(map.getZoom())

    const createPins = (features: Feature[]) => {

      return features.map((feature: Feature) => {

        const el = document.createElement('a');
        el.href = feature.properties?.url
        el.className = 'marker';
        el.style.setProperty("--record-count", feature.properties?.recordCount)

        const popup = new mapboxgl.Popup({ 
          offset: 15, 
          closeButton: false,
          closeOnClick: false
        }) // add popups
        .setHTML(
          `<h3 class="utility">${feature.properties?.title}</h3>
          <span class="utility-small">&#91;${feature.properties?.recordCount.toLocaleString()}&#93;</span>
          `
        )

        el.addEventListener("mouseenter", () => {
          popup.addTo(map)
        })

        el.addEventListener("mouseleave", () => {
          popup.remove(map)
        })

        // el.addEventListener("click", () => )

        // popup.on('open', () => {
        //     console.log('popup was opened');
        // });

        return new mapboxgl.Marker(el)
          .setLngLat(feature.geometry.coordinates)
          .setPopup(popup)
          // .addTo(map);

          

      })
    }

    const addPins = (pins: Marker[]) => {
      for (let i = 0; i < pins.length; i++) {
        pins[i].addTo(map)
      }
    }

    const removePins = (pins: Marker[]) => {
      for (let i = 0; i < pins.length; i++) {
        pins[i].remove(map)
      }
    }

    const countryPins = createPins(countryData.features)
    const statePins = createPins(stateData.features)
    const cityPins = createPins(cityData.features)

    switch (zoomLevel) {
      case 0:
        addPins(countryPins)
        break;
      case 1:
        addPins(statePins)
        break;
      case 2:
        addPins(cityPins)
        break;
      case 3:
        addPins(cityPins)
        break;
      default:
        addPins(countryPins)
        break;
    }
    // addPins(countryPins)
    // let zoomLevel = 0

    const handleZoom = () => {

      const currentZoom = map.getZoom()
      
      // City Level
      if (currentZoom >= ZOOM_LEVELS[3] && zoomLevel !== 3) {
        removePins(countryPins)
        removePins(statePins)
        addPins(cityPins)
        zoomLevel = 3
      } 
      
      // State Level
      if (currentZoom >= ZOOM_LEVELS[2] && currentZoom < ZOOM_LEVELS[3] && zoomLevel !== 2) {
        removePins(countryPins)
        removePins(statePins)
        addPins(cityPins)
        zoomLevel = 2
      } 
      
      // Country Level
      if (currentZoom < ZOOM_LEVELS[2] && zoomLevel !== 1) {
        removePins(countryPins)
        addPins(statePins)
        removePins(cityPins)
        zoomLevel = 1
      } 
      
      // World Level
      if (currentZoom < ZOOM_LEVELS[1] && zoomLevel !== 0) {
        addPins(countryPins)
        removePins(statePins)
        removePins(cityPins)
        zoomLevel = 0
      }
    }

    map.on('zoom', () => handleZoom())
  }

  document.addEventListener("astro:page-load", (event) => {
    updateMapData()
    let targetCoords = DEFAULT_COORDS
    // let targetZoom = DEFAULT_ZOOM

    if (latitude && longitude) targetCoords = new LngLat(parseFloat(longitude), parseFloat(latitude))
    // if (zoom) targetZoom = parseFloat(zoom)


    if (map) {
      map.flyTo({
        center: targetCoords,
        zoom: ZOOM_LEVELS[zoomLevel],
        essential: true // optional; respects user motion settings
      });
    } else {
      getData()
    }
  });

  getData()

</script>

<style>
  .map {
    position: absolute;
    inset: 0;
    z-index: 0;

    /* &::after {
      content: "";
      position: absolute;
      left: 0;
      right: 0;
      bottom: 0;
      height: 30svh;
      background: linear-gradient(0deg, rgba(0,0,0,1), rgba(0,0,0,0));
      z-index: 2;
    } */

    .marker {
      --record-count: 1; /* To be overwritten per pin */

      /* Settings */
      --pin-size-min: 5px;
      --pin-size-max: 10px;
      --pin-size-threshold: 500;

      /* Size Calculation */
      --pin-size-range: calc(var(--pin-size-max) - var(--pin-size-min));
      --pin-scale: min(calc(var(--record-count) / var(--pin-size-threshold)), 1);
      --pin-size: calc( var(--pin-scale) * var(--pin-size-range) + var(--pin-size-min));
      /* --pin-size: 10px; */

      /* background-color: color-mix(in srgb, var(--color-accent-01) calc(var(--pin-scale) * 100%), var(--grey-200)); */
      /* background-color: var(--white); */
      background-size: cover;
      width: 16px;
      height: 16px;
      /* width: var(--pin-size);
      height: var(--pin-size); */
      border-radius: 50%;
      padding: 10px;
      cursor: pointer;
      transition: width var(--anim-sm), height var(--anim-sm), background-color var(--anim-sm);

      &::after {
        content: "";
        position: absolute;
        inset: calc(20% * (1 - var(--pin-scale)) + 20%);
        /* background-color: red; */
        background-color: color-mix(in srgb, var(--color-accent-01) calc(var(--pin-scale) * 100%), var(--grey-200));
        border-radius: 50%;
        opacity: 0.8;
      }
    }

    .marker:hover {
      /* scale: 1.1; */
      /* --hover-size: 20px;
      width: var(--hover-size);
      height: var(--hover-size); */
      background-color: var(--color-background);
    }


    .mapboxgl-map {
      font: inherit !important;
    }

    .mapboxgl-popup-content {
      border-radius: var(--radius-sm);
      color: var(--color-foreground);
      display: flex;
      flex-direction: row;
      gap: var(--space-3xs);
      padding: var(--space-xs);

      & * {
        margin: 0;
      }
      /* font: inherit; */
    }
  }
</style>

<style is:global>
  .mapboxgl-map {
    font: inherit !important;
  }
</style>